TODO
* status information

* provide go and js API
* web client

* audit unlocks (should probably always be in defer)
* audit dedup
* make sure there is no html injection possible
* check for memory leaks

* more friendly error messages (parse body on HTTP failure in wire/client.go)

MAYBE:
* use glog

* allow idempotent submitting of updates without error?

* think about how to make lookups never fail in the face of concurrent updates
* think about 'records traveling back in time' with lookups in clients
* allow server admin to delete entries

* serve lookup hashes for servers that currently disagree?

* write all submitted updates to storage?

* build the "recovery mode" for consensus without coordination

LATER:
* add rate limits

* allow for a pure lookup server mode, and make it always take e.g. the majority value
* make publishing self optional?

* allow chaining of replication
* maybe perform database load in parallel or in batches
* add an auditable log
* make recovery mode automatic

* parallelize update processing in server

* allow runtime (re-)configuration of upstream, recovery mode
* allow updates of upstream, perhaps by re-reading config file

